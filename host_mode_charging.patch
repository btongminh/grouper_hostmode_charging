commit 85252d5740e14b8015e7f3346de9b0d06aa6c4e9
Author: Logan Akamatsu <logan@loganakamatsu.com>
Date:   Fri Mar 27 14:41:06 2015 -0400

    Intial port of host charging
    
    Change-Id: I5c45605b3ea2821b443e9381620e90b8d95e671b

diff --git a/drivers/power/smb347-charger.c b/drivers/power/smb347-charger.c
index 1c5d136..dc2c584 100755
--- a/drivers/power/smb347-charger.c
+++ b/drivers/power/smb347-charger.c
@@ -103,6 +103,7 @@
 #define APSD_DCP		0x02
 #define APSD_OTHER		0x03
 #define APSD_SDP		0x04
+#define APSD_HOST_MODE_CHARGING   0x06
 #define USB_30		0x20
 #define DCIN_OV_UV_STS		0x50
 #define DELAY_FOR_CURR_LIMIT_RECONF (60)
@@ -133,6 +134,13 @@ static int gpio_dock_in = 0;
 static int charge_en_flag = 1;
 static unsigned usb_det_cable_type = non_cable;
 
+static volatile int host_mode_charging_state = 0;
+static volatile int lastExternalPowerState = 0;
+static volatile int lastOtgState = 0;
+static volatile int lastChargeSlaveDevicesState = 0;
+
+
+
 /* Sysfs interface */
 static DEVICE_ATTR(reg_status, S_IWUSR | S_IRUGO, smb347_reg_show, NULL);
 
@@ -246,94 +254,121 @@ static void smb347_clear_interrupts(struct i2c_client *client)
 								__func__);
 }
 
-static int smb347_configure_otg(struct i2c_client *client, int enable)
+static int smb347_configure_otg(struct i2c_client *client, int enableOTG, int chargeSlaves, int stopChargeSlaves)
 {
-	int ret = 0;
-
-	/*Enable volatile writes to registers*/
-	ret = smb347_volatile_writes(client, smb347_ENABLE_WRITE);
-	if (ret < 0) {
-		dev_err(&client->dev, "%s error in configuring otg..\n",
-								__func__);
-		goto error;
-	}
-
-	if (enable) {
-
-		/* Configure INOK to be active high */
-		ret = smb347_update_reg(client, smb347_SYSOK_USB3, 0x01);
-		if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-		}
-
-		/* Change "OTG output current limit" to 250mA */
-		ret = smb347_read(client, smb347_OTG_TLIM_REG);
-	       if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-	       }
-	       ret = smb347_write(client, smb347_OTG_TLIM_REG, (ret & (~(1<<3))));
-	       if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-	       }
-
-		/* Enable OTG */
-	       ret = smb347_update_reg(client, smb347_CMD_REG, 0x10);
-	       if (ret < 0) {
-		       dev_err(&client->dev, "%s: Failed in writing register"
-				"0x%02x\n", __func__, smb347_CMD_REG);
-			goto error;
-	       }
-
-		/* Change "OTG output current limit" from 250mA to 750mA */
-		ret = smb347_update_reg(client, smb347_OTG_TLIM_REG, 0x08);
-	       if (ret < 0) {
-		       dev_err(&client->dev, "%s: Failed in writing register"
-				"0x%02x\n", __func__, smb347_OTG_TLIM_REG);
-			goto error;
-	       }
-
-	} else {
-	       /* Disable OTG */
-	       ret = smb347_read(client, smb347_CMD_REG);
-	       if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-	       }
-
-	       ret = smb347_write(client, smb347_CMD_REG, (ret & (~(1<<4))));
-	       if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-	       }
-
-		/* Configure INOK to be active low */
-		ret = smb347_read(client, smb347_SYSOK_USB3);
-		if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-		}
-
-		ret = smb347_write(client, smb347_SYSOK_USB3, (ret & (~(1))));
-		if (ret < 0) {
-			dev_err(&client->dev, "%s: err %d\n", __func__, ret);
-			goto error;
-		}
-	}
-
-	/* Disable volatile writes to registers */
-	ret = smb347_volatile_writes(client, smb347_DISABLE_WRITE);
-	if (ret < 0) {
-		dev_err(&client->dev, "%s error in configuring OTG..\n",
-								__func__);
-	       goto error;
-	}
+  int ret = 0;
+
+  printk("smb347_configure_otg %d %d %d %d\n",enableOTG, chargeSlaves, stopChargeSlaves, lastOtgState);
+
+  /*Enable volatile writes to registers*/
+  ret = smb347_volatile_writes(client, smb347_ENABLE_WRITE);
+  if (ret < 0) {
+    dev_err(&client->dev, "%s error in configuring otg..\n",
+        __func__);
+    goto error;
+  }
+
+  if(chargeSlaves) {
+          if(!lastChargeSlaveDevicesState) {
+                  /* Configure INOK to be active high */
+                  //printk("smb347_configure_otg INOK to be active high\n");
+                  ret = smb347_update_reg(client, smb347_SYSOK_USB3, 0x01);
+                  if (ret < 0) {
+                          dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+                          goto error;
+                  }
+
+                  /* Change "OTG output current limit" to 250mA */
+                  //printk("smb347_configure_otg charge slaves 250mA\n");
+                  ret = smb347_read(client, smb347_OTG_TLIM_REG);
+                  if (ret < 0) {
+                          dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+                          goto error;
+                  }
+                  ret = smb347_write(client, smb347_OTG_TLIM_REG, (ret & (~(1<<3))));
+                  if (ret < 0) {
+                          dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+                          goto error;
+                  }
+          }
+  }
+
+  if(enableOTG>0) {
+    if(!lastOtgState) {
+      printk("smb347_configure_otg enable host mode\n");
+      ret = smb347_update_reg(client, smb347_CMD_REG, 0x10);
+      if (ret < 0) {
+        dev_err(&client->dev, "%s: Failed in writing register"
+            "0x%02x\n", __func__, smb347_CMD_REG);
+        goto error;
+      }
+      lastOtgState = 1;
+    }
+  } else if(enableOTG==0) {
+    if(lastOtgState) {
+      printk("smb347_configure_otg disable host mode\n");
+      ret = smb347_read(client, smb347_CMD_REG);
+      if (ret < 0) {
+        dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+        goto error;
+      }
+
+      ret = smb347_write(client, smb347_CMD_REG, (ret & (~(1<<4))));
+      if (ret < 0) {
+        dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+        goto error;
+      }
+      lastOtgState=0;
+    }
+  }
+
+  if(chargeSlaves) {
+          if(!lastChargeSlaveDevicesState) {
+                  /* Change "OTG output current limit" from 250mA to 750mA */
+                  //printk("smb347_configure_otg charge slaves 750mA\n");
+                  ret = smb347_update_reg(client, smb347_OTG_TLIM_REG, 0x08);
+                  if (ret < 0) {
+                          dev_err(&client->dev, "%s: Failed in writing register"
+                                          "0x%02x\n", __func__, smb347_OTG_TLIM_REG);
+                          goto error;
+                  }
+                  lastChargeSlaveDevicesState = 1;
+                  printk("smb347_configure_otg lastChargeSlaveDevicesState=%d\n",lastChargeSlaveDevicesState);
+          }
+  }
+  else
+          if(stopChargeSlaves) {
+                  if(lastChargeSlaveDevicesState) {
+                          //printk("smb347_configure_otg stop charging slaves\n");
+                          /* Configure INOK to be active low */
+                          ret = smb347_read(client, smb347_SYSOK_USB3);
+                          if (ret < 0) {
+                                  dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+                                  goto error;
+                          }
+
+                          ret = smb347_write(client, smb347_SYSOK_USB3, (ret & (~(1))));
+                          if (ret < 0) {
+                                  dev_err(&client->dev, "%s: err %d\n", __func__, ret);
+                                  goto error;
+                          }
+                          lastChargeSlaveDevicesState = 0;
+                          printk("smb347_configure_otg lastChargeSlaveDevicesState=%d\n",lastChargeSlaveDevicesState);
+                  }
+          }
+
+  /* Disable volatile writes to registers */
+  ret = smb347_volatile_writes(client, smb347_DISABLE_WRITE);
+  if (ret < 0) {
+    dev_err(&client->dev, "%s error in configuring OTG..\n",
+        __func__);
+    goto error;
+  }
 error:
-	return ret;
+  return ret;
 }
 
+
 static int smb347_configure_charger(struct i2c_client *client, int value)
 {
 	int ret = 0;
@@ -842,173 +877,278 @@ static int smb347_configure_interrupts(struct i2c_client *client)
 error:
 	return ret;
 }
+static int cable_type_detect(void);
 
 static void smb347_otg_status(enum usb_otg_state to, enum usb_otg_state from, void *data)
 {
-	struct i2c_client *client = charger->client;
-	int ret;
-
-	if ((from == OTG_STATE_A_SUSPEND) && (to == OTG_STATE_A_HOST)) {
-
-		/* configure charger */
-		ret = smb347_configure_charger(client, 0);
-		if (ret < 0)
-			dev_err(&client->dev, "%s() error in configuring"
-				"otg..\n", __func__);
-
-		/* ENABLE OTG */
-		ret = smb347_configure_otg(client, 1);
-		if (ret < 0)
-			dev_err(&client->dev, "%s() error in configuring"
-				"otg..\n", __func__);
-
-	} else if ((from == OTG_STATE_A_HOST) && (to == OTG_STATE_A_SUSPEND)) {
-
-		/* Disable OTG */
-		ret = smb347_configure_otg(client, 0);
-		if (ret < 0)
-			dev_err(&client->dev, "%s() error in configuring"
-				"otg..\n", __func__);
-
-		/* configure charger */
-		ret = smb347_configure_charger(client, 1);
-		if (ret < 0)
-			dev_err(&client->dev, "%s() error in configuring"
-				"otg..\n", __func__);
-
-		/*
-		ret = smb347_configure_interrupts(client);
-		if (ret < 0)
-			dev_err(&client->dev, "%s() error in configuring"
-						"otg..\n", __func__);
-		*/
-	}
+  struct i2c_client *client = charger->client;
+  int ret;
+  int newExternalPowerState=0;
+
+  printk("smb347_otg_status from=%d to=%d lastOtgState=%d lastExternalPowerState=%d lastChargeSlaveDevicesState=%d \n",
+      from,to,lastOtgState,lastExternalPowerState,lastChargeSlaveDevicesState);
+
+  if(to==10) {
+    // only when going suspend (OTG PULL)
+    // small sleep, so that ehci-tegra #### tegra_usb_resume can run first
+    // and use host_mode_charging_state's current value (probably charging), 
+    // before we call cable_type_detect() (when it will likely switch to not charging)
+    // FIXME: but is tegra_usb_resume not only called on OTG PLUG?
+    // FIXME: do I mean "so that tegra_ehci_irq() can run first" ?
+    schedule_timeout_interruptible(msecs_to_jiffies(100));
+    // when doing this pause, smb347_resume() will call cable_type_detect() before we do below
+  }
+
+  cable_type_detect();
+
+  if (to == OTG_STATE_A_HOST) {
+    if(charger->cur_cable_type==1 || charger->cur_cable_type==3)
+      newExternalPowerState = 1;
+
+    if(!newExternalPowerState) {
+            // no external power
+            // allow battery to be charged
+            printk("smb347_otg_status allow battery to be charged\n");
+            ret = smb347_configure_charger(client, 1);
+            if (ret < 0)
+                    dev_err(&client->dev, "%s() error in configuring"
+                                    "otg..\n", __func__);
+            // disableOTG, dont chargeSlaves, don't stopChargeSlaves
+            printk("smb347_otg_status disableOTG, dont chargeSlaves, don't stopChargeSlaves\n");
+            ret = smb347_configure_otg(client, 0, 0, 0);
+            if (ret < 0)
+                    dev_err(&client->dev, "%s() error in configuring"
+                                    "otg..\n", __func__);
+            // tmtmtm: mobile-mode: we need to be careful NOT to disable charger detection too early
+            // once we start charging slaves ourselfs, we will not be able to detect ext power coming in
+
+            // also: why are we waiting here, if inok_isr_work_function is called on power
+            //       we actually depend on it to arrive in parallel
+
+            // make external power detectable in case it is coming back
+            printk("smb347_otg_status make external power detectable\n");
+            ret = smb347_configure_interrupts(client);
+            if (ret < 0)
+                    dev_err(&client->dev, "%s() error in configuring"
+                                    "otg..\n", __func__);
+
+            printk("smb347_otg_status waiting for external power...\n");
+            // if power is detected, inok_isr_work_function will strike after aprox 1500 ms
+            schedule_timeout_interruptible(msecs_to_jiffies(500));
+            schedule_timeout_interruptible(msecs_to_jiffies(500));
+            schedule_timeout_interruptible(msecs_to_jiffies(400));
+            schedule_timeout_interruptible(msecs_to_jiffies(400));
+            if(charger->cur_cable_type==1 || charger->cur_cable_type==3)
+                    newExternalPowerState = 1;
+            if(!newExternalPowerState) {
+                    cable_type_detect();
+                    if(charger->cur_cable_type==1 || charger->cur_cable_type==3)
+                            newExternalPowerState = 1;
+            }
+            printk("smb347_otg_status waiting for external power done %d\n",newExternalPowerState);
+
+            if(!newExternalPowerState) {
+                    // battery will NOT be charged
+                    ret = smb347_configure_charger(client, 0);
+                    if (ret < 0)
+                            dev_err(&client->dev, "%s() error in configuring"
+                                            "otg..\n", __func__);
+                    // enableOTG, chargeSlaves, don't stopChargeSlaves
+                    ret = smb347_configure_otg(client, 1, 1, 0);
+                    if (ret < 0)
+                            dev_err(&client->dev, "%s() error in configuring"
+                                            "otg..\n", __func__);
+            }
+    }
+
+    if(newExternalPowerState) {
+      // allow battery to be charged
+      printk("smb347_otg_status allow battery to be charged\n");
+      ret = smb347_configure_charger(client, 1);
+      if (ret < 0)
+        dev_err(&client->dev, "%s() error in configuring"
+            "otg..\n", __func__);
+      // enableOTG, don't chargeSlaves, don't stopChargeSlaves
+      printk("smb347_otg_status enableOTG, dont chargeSlaves, don't stopChargeSlaves\n");
+      ret = smb347_configure_otg(client, 1, 0, 0);
+      if (ret < 0)
+        dev_err(&client->dev, "%s() error in configuring"
+            "otg..\n", __func__);
+    }
+
+  } else if (to == OTG_STATE_A_SUSPEND) {
+
+    if(from == OTG_STATE_A_HOST) {
+      // disable host-mode and stop slave-charging
+      printk("smb347_otg_status disable host-mode and stop slave-charging\n");
+      ret = smb347_configure_otg(client, 0, 0, lastChargeSlaveDevicesState);
+      if (ret < 0)
+        dev_err(&client->dev, "%s() error in configuring"
+            "otg..\n", __func__);
+      // allow battery to be charged
+      printk("smb347_otg_status allow battery to be charged\n");
+      ret = smb347_configure_charger(client, 1);
+      if (ret < 0)
+        dev_err(&client->dev, "%s() error in configuring"
+            "otg..\n", __func__);
+    }
+  }
+
+  //if(!newExternalPowerState /*&& !lastChargeSlaveDevicesState*/) {
+  // make external power detectable in case it is coming back
+  printk("smb347_otg_status make external power detectable\n");
+  ret = smb347_configure_interrupts(client);
+  if (ret < 0)
+    dev_err(&client->dev, "%s() error in configuring"
+        "otg..\n", __func__);
+  //}
+
+  lastExternalPowerState = newExternalPowerState;
+  printk("smb347_otg_status DONE lastOtgState=%d externalPowerState=%d chargeSlaveDevicesState=%d\n",
+      lastOtgState,lastExternalPowerState,lastChargeSlaveDevicesState);
 }
 
+
 /* workqueue function */
 static int cable_type_detect(void)
 {
-	struct i2c_client *client = charger->client;
-	u8 retval;
-	int  success = 0;
-	int ac_ok = GPIO_AC_OK;
-	int dock_in = gpio_dock_in;
-
-	/*
-	printk("cable_type_detect %d %lu %d %x jiffies=%lu %lu+\n",
-	charger->old_cable_type,
-	charger->time_of_1800mA_limit,
-	gpio_get_value(gpio),
-	time_after(charger->time_of_1800mA_limit+(4*HZ), jiffies ),
-	jiffies,
-	charger->time_of_1800mA_limit+(ADAPTER_PROTECT_DELAY*HZ));
-	*/
-
-	if((pcba_ver <= GROUPER_PCBA_ER2) && (project_id == GROUPER_PROJECT_NAKASI))
-		return 0;
-
-	mutex_lock(&charger->cable_lock);
-
-	if ((charger->old_cable_type == ac_cable) &&
-	charger->time_of_1800mA_limit && gpio_get_value(ac_ok) &&
-	time_after(charger->time_of_1800mA_limit+
-					ADAPTER_PROTECT_DELAY, jiffies)) {
-		smb347_set_InputCurrentlimit(client, 900);
-		charger->test_1800mA_fail = 1;
-		queue_delayed_work(smb347_wq,
-				&charger->test_fail_clear_work, 1*HZ);
-	}
-
-	if (gpio_get_value(ac_ok)) {
-		printk(KERN_INFO "INOK=H\n");
-		charger->cur_cable_type = non_cable;
-		smb347_set_InputCurrentlimit(client, 900);
-		success = battery_callback(non_cable);
+  struct i2c_client *client = charger->client;
+  u8 retval;
+  int  success = 0;
+  int ac_ok = GPIO_AC_OK;
+  int dock_in = gpio_dock_in;
+
+  printk(KERN_INFO "cable_type_detect()\n");
+  /*
+     printk("cable_type_detect %d %lu %d %x jiffies=%lu %lu+\n",
+     charger->old_cable_type,
+     charger->time_of_1800mA_limit,
+     gpio_get_value(gpio),
+     time_after(charger->time_of_1800mA_limit+(4*HZ), jiffies ),
+     jiffies,
+     charger->time_of_1800mA_limit+(ADAPTER_PROTECT_DELAY*HZ));
+   */
+
+  if((pcba_ver <= GROUPER_PCBA_ER2) && (project_id == GROUPER_PROJECT_NAKASI)) {
+    printk(KERN_INFO "cable_type_detect() wrong\n");
+    return 0;
+  }
+
+  host_mode_charging_state = 0;
+  mutex_lock(&charger->cable_lock);
+
+  if ((charger->old_cable_type == ac_cable) &&
+      charger->time_of_1800mA_limit && gpio_get_value(ac_ok) &&
+      time_after(charger->time_of_1800mA_limit+
+        ADAPTER_PROTECT_DELAY, jiffies)) {
+    printk(KERN_INFO "cable_type_detect() charger->test_1800mA_fail\n");
+    smb347_set_InputCurrentlimit(client, 900);
+    charger->test_1800mA_fail = 1;
+    queue_delayed_work(smb347_wq,
+        &charger->test_fail_clear_work, 1*HZ);
+  }
+
+  if (gpio_get_value(ac_ok)) {
+    printk(KERN_INFO "INOK=H no power\n");
+    charger->cur_cable_type = non_cable;
+    smb347_set_InputCurrentlimit(client, 900);
+    success = battery_callback(non_cable);
 #ifdef TOUCH_CALLBACK_ENABLED
-               touch_callback(non_cable);
+    touch_callback(non_cable);
 #endif
-		wake_unlock(&charger_wakelock);
-	} else {
-		printk(KERN_INFO "INOK=L\n");
-		retval = smb347_read(client, smb347_INTR_STS_E);
-		SMB_NOTICE("Reg39 : 0x%02x\n", retval);
-		if (!(retval & DCIN_OV_UV_STS) && !gpio_get_value(dock_in)) {
-			SMB_NOTICE("DC_IN\n");
-			success = battery_callback(ac_cable);
-		} else {
-
-			/* cable type dection */
-			retval = smb347_read(client, smb347_STS_REG_E);
-			SMB_NOTICE("Reg3F : 0x%02x\n", retval);
-			if (retval & USBIN) {
-				SMB_NOTICE("USB_IN\n");
-				retval = smb347_read(client, smb347_STS_REG_D);
-				SMB_NOTICE("Reg3E : 0x%02x\n", retval);
-				if (retval & APSD_OK) {
-						retval &= APSD_RESULT;
-					if (retval == APSD_CDP) {
-						printk(KERN_INFO "Cable: CDP\n");
-						charger->cur_cable_type = ac_cable;
-						success = battery_callback(ac_cable);
+    wake_unlock(&charger_wakelock);
+  } else {
+    printk(KERN_INFO "INOK=L\n");
+    retval = smb347_read(client, smb347_INTR_STS_E);
+    SMB_NOTICE("Reg39 : 0x%02x\n", retval);
+    if (!(retval & DCIN_OV_UV_STS) && !gpio_get_value(dock_in)) {
+      SMB_NOTICE("DC_IN\n");
+      success = battery_callback(ac_cable);
+
+      // tmtmtm
+      charger->cur_cable_type = ac_cable;
+
+    } else {
+      /* cable type dection */
+      retval = smb347_read(client, smb347_STS_REG_E);
+      SMB_NOTICE("Reg3F : 0x%02x\n", retval);
+      if (retval & USBIN) {
+        SMB_NOTICE("USB_IN\n");
+        retval = smb347_read(client, smb347_STS_REG_D);
+        SMB_NOTICE("Reg3E : 0x%02x\n", retval);
+        if (retval & APSD_OK) {
+          retval &= APSD_RESULT;
+          if (retval == APSD_CDP) {
+            printk(KERN_INFO "Cable: CDP\n");
+            charger->cur_cable_type = ac_cable;
+            success = battery_callback(ac_cable);
 #ifdef TOUCH_CALLBACK_ENABLED
-	                                    touch_callback(ac_cable);
+            touch_callback(ac_cable);
 #endif
-					} else if (retval == APSD_DCP) {
-						printk(KERN_INFO "Cable: DCP\n");
-						charger->cur_cable_type = ac_cable;
-						success = battery_callback(ac_cable);
+          } else if (retval == APSD_DCP) {
+            printk(KERN_INFO "Cable: DCP\n");
+            charger->cur_cable_type = ac_cable;
+            success = battery_callback(ac_cable);
 #ifdef TOUCH_CALLBACK_ENABLED
-	                                    touch_callback(ac_cable);
+            touch_callback(ac_cable);
 #endif
-					} else if (retval == APSD_OTHER) {
-						charger->cur_cable_type = ac_cable;
-						success = battery_callback(ac_cable);
+          } else if (retval == APSD_OTHER) {
+            charger->cur_cable_type = ac_cable;
+            success = battery_callback(ac_cable);
 #ifdef TOUCH_CALLBACK_ENABLED
-	                                   touch_callback(ac_cable);
+            touch_callback(ac_cable);
 #endif
-						printk(KERN_INFO "Cable: OTHER\n");
-					} else if (retval == APSD_SDP) {
-						printk(KERN_INFO "Cable: SDP\n");
-						charger->cur_cable_type = usb_cable;
-						success = battery_callback(usb_cable);
+            printk(KERN_INFO "Cable: OTHER\n");
+          } else if (retval == APSD_SDP) {
+            printk(KERN_INFO "Cable: SDP\n");
+            charger->cur_cable_type = usb_cable;
+            success = battery_callback(usb_cable);
 #ifdef TOUCH_CALLBACK_ENABLED
-	                                    touch_callback(usb_cable);
+            touch_callback(usb_cable);
 #endif
-					} else {
-						charger->cur_cable_type = unknow_cable;
-						printk(KERN_INFO "Unkown Plug In Cable type !\n");
-
-						if(usb_det_cable_type) {
-							printk(KERN_INFO "Use usb det %s cable to report\n",
-								(usb_det_cable_type == ac_cable) ? "ac" : "usb");
-							charger->cur_cable_type = usb_det_cable_type;
-							success = battery_callback(usb_det_cable_type);
-						}
-					}
-				} else {
-					charger->cur_cable_type = unknow_cable;
-					printk(KERN_INFO "APSD not completed\n");
-				}
-			} else {
-				charger->cur_cable_type = unknow_cable;
-				printk(KERN_INFO "USBIN=0\n");
-			}
-		}
-	}
-
-	if (charger->cur_cable_type == ac_cable &&
-		charger->old_cable_type != ac_cable &&
-		charger->test_1800mA_fail == 0) {
-		wake_lock(&charger_wakelock);
-		queue_delayed_work(smb347_wq, &charger->curr_limit_work,
-					DELAY_FOR_CURR_LIMIT_RECONF*HZ);
-	}
-	charger->old_cable_type = charger->cur_cable_type;
-
-	mutex_unlock(&charger->cable_lock);
-	return success;
+          } else if(retval == APSD_HOST_MODE_CHARGING) {  // tmtmtm
+            printk(KERN_INFO "Cable: host mode charging\n");
+            charger->cur_cable_type = usb_cable;
+            success = battery_callback(usb_cable);
+            host_mode_charging_state = 1;         // tmtmtm
+#ifdef TOUCH_CALLBACK_ENABLED
+            touch_callback(usb_cable);
+#endif
+          } else {
+            charger->cur_cable_type = unknow_cable;
+            printk(KERN_INFO "Unkown Plug In Cable type !\n");
+            if (gpio_get_value(dock_in)) {
+              charger->cur_cable_type = usb_cable;
+              success = battery_callback(usb_cable);
+            }
+          }
+        } else {
+          charger->cur_cable_type = unknow_cable;
+          printk(KERN_INFO "APSD not completed\n");
+        }
+      } else {
+        charger->cur_cable_type = unknow_cable;
+        printk(KERN_INFO "USBIN=0\n");
+
+        success = battery_callback(non_cable);
+      }
+    }
+  }
+
+  if (charger->cur_cable_type == ac_cable &&
+      charger->old_cable_type != ac_cable &&
+      charger->test_1800mA_fail == 0) {
+    wake_lock(&charger_wakelock);
+    queue_delayed_work(smb347_wq, &charger->curr_limit_work,
+        DELAY_FOR_CURR_LIMIT_RECONF*HZ);
+  }
+  charger->old_cable_type = charger->cur_cable_type;
+
+  mutex_unlock(&charger->cable_lock);
+  return success;
 }
 
+
 void usb_det_cable_callback(unsigned cable_type)
 {
 	usb_det_cable_type = cable_type;
@@ -1021,6 +1161,84 @@ void usb_det_cable_callback(unsigned cable_type)
 
 static void inok_isr_work_function(struct work_struct *dat)
 {
+  struct i2c_client *client = charger->client;
+
+  // called on power loss/gain, but also if just a bare (non-powered) OTG adapter is pulled
+  printk("inok_isr_work_function lastOtgState=%d lastExternalPowerState=%d lastChargeSlaveDevicesState=%d\n",
+      lastOtgState,lastExternalPowerState,lastChargeSlaveDevicesState);
+
+  if(lastOtgState>0 && lastExternalPowerState>0) {
+    // we used to be in externally powered host mode
+    // this means external power was just lost
+          cancel_delayed_work(&charger->curr_limit_work);
+          cancel_delayed_work(&charger->inok_isr_work);
+
+          printk("inok_isr_work_function lost external power in host mode; charge slave devices\n");
+
+          // normally, smb347_otg_status() is called whenever the OTG adapter is pulled or plugged
+          // here, external power was lost while the OTG adapter remained plugged
+          // we call smb347_otg_status() now, to activate self-charging of slave devices
+          // so we can continue host mode in OTG mode
+          // if we would NOT call smb347_otg_status() here, slave devices would stay without power now
+
+          // tmtmtm: we don't want to call this, if OTG-adapter is pulled (not just power)
+          smb347_otg_status(OTG_STATE_A_HOST,OTG_STATE_A_HOST,NULL);
+
+          if(!lastExternalPowerState) {
+                  // make external power detectable in case it is coming back
+      printk("inok_isr_work_function make external power detectable\n");
+      int ret = smb347_configure_interrupts(client);
+      if (ret < 0)
+        dev_err(&client->dev, "%s() error in configuring"
+            "otg..\n", __func__);
+    }
+
+    printk("inok_isr_work_function done lastOtgState=%d lastExternalPowerState=%d lastChargeSlaveDevicesState=%d\n",
+        lastOtgState,lastExternalPowerState,lastChargeSlaveDevicesState);
+    return;
+  }
+
+  // we were NOT in externally powered host mode
+  cable_type_detect();
+  if(charger->cur_cable_type!=1 && charger->cur_cable_type!=3) {
+    // still no power incoming
+    printk("inok_isr_work_function no power lastExternalPowerState=%d\n",lastExternalPowerState);
+    if(lastExternalPowerState) {
+      cancel_delayed_work(&charger->curr_limit_work);
+      cancel_delayed_work(&charger->inok_isr_work);
+      smb347_clear_interrupts(client);
+
+      // make device aware it is now discharging
+      lastExternalPowerState = 0;
+    }
+
+    // make external power detectable
+    printk("inok_isr_work_function make external power detectable\n");
+    int ret = smb347_configure_interrupts(client);
+    if (ret < 0)
+      dev_err(&client->dev, "%s() error in configuring"
+          "otg..\n", __func__);
+    return;
+  }
+
+  // power is incoming
+  lastExternalPowerState = 1;
+
+  // host_mode_charging_state may have been set by cable_type_detect()
+  if(host_mode_charging_state>0 && lastOtgState==0) {
+    printk("inok_isr_work_function external power available, start host mode\n");
+    if(smb347_configure_otg(client, 1, 0, 0)<0)
+      dev_err(&client->dev, "%s() error in configuring"
+          "otg..\n", __func__);
+  }
+
+  //smb347_clear_interrupts(client);      // FIXME???
+  printk("inok_isr_work_function external power available lastOtgState=%d\n",lastOtgState);
+}
+
+/*
+static void inok_isr_work_function(struct work_struct *dat)
+{
 	struct i2c_client *client = charger->client;
 
 	cancel_delayed_work(&charger->curr_limit_work);
@@ -1030,6 +1248,7 @@ static void inok_isr_work_function(struct work_struct *dat)
 
 	smb347_clear_interrupts(client);
 }
+*/
 
 static void dockin_isr_work_function(struct work_struct *dat)
 {
@@ -1316,7 +1535,7 @@ static int smb347_shutdown(struct i2c_client *client)
 	printk("smb347_shutdown+\n");
 
 	/* Disable OTG */
-	ret = smb347_configure_otg(client, 0);
+    ret = smb347_configure_otg(client, 0, 0, lastChargeSlaveDevicesState);
 	if (ret < 0)
 		dev_err(&client->dev, "%s() error in configuring"
 			"otg..\n", __func__);
